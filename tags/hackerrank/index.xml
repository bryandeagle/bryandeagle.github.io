<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hackerrank on Bryan Deagle</title>
    <link>https://dea.gl/tags/hackerrank/</link>
    <description>Recent content in hackerrank on Bryan Deagle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 01 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dea.gl/tags/hackerrank/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hackerrank: Athlete Sort</title>
      <link>https://dea.gl/posts/2020/09/hackerrank-athlete-sort/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dea.gl/posts/2020/09/hackerrank-athlete-sort/</guid>
      <description>Problem You are given a spreadsheet that contains a list of N athletes and their details (such as age, height, weight and so on). You are required to sort the data based on the Kth attribute and print the final resulting table. Follow the example given below for better understanding.
Note that K is indexed from 0 to M-1, where M is the number of attributes.
Note: If two attributes are the same for different rows, for example, if two atheletes are of the same age, print the row that appeared first in the input.</description>
    </item>
    
    <item>
      <title>Hackerrank: Company Logo</title>
      <link>https://dea.gl/posts/2020/09/hackerrank-company-logo/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dea.gl/posts/2020/09/hackerrank-company-logo/</guid>
      <description>Problem A newly opened multinational brand has decided to base their company logo on the three most common characters in the company name. They are now trying out various combinations of company names and logos based on this condition. Given a string , which is the company name in lowercase letters, your task is to find the top three most common characters in the string.
 Print the three most common characters along with their occurrence count.</description>
    </item>
    
    <item>
      <title>Hackerrank: Compress the String!</title>
      <link>https://dea.gl/posts/2020/09/hackerrank-compress-the-string/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dea.gl/posts/2020/09/hackerrank-compress-the-string/</guid>
      <description>Problem In this task, we would like for you to appreciate the usefulness of the groupby() function of itertools . To read more about this function, Check this out .
You are given a string S. Suppose a character &amp;lsquo;c&amp;rsquo; occurs consecutively X times in the string. Replace these consecutive occurrences of the character &amp;lsquo;c&amp;rsquo; with (X, c) in the string.
For a better understanding of the problem, check the explanation.</description>
    </item>
    
    <item>
      <title>Hackerrank: Dealing with Complex Numbers</title>
      <link>https://dea.gl/posts/2020/09/hackerrank-dealing-with-complex-numbers/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dea.gl/posts/2020/09/hackerrank-dealing-with-complex-numbers/</guid>
      <description>Problem For this challenge, you are given two complex numbers, and you have to print the result of their addition, subtraction, multiplication, division and modulus operations.
The real and imaginary precision part should be correct up to two decimal places.
Solution import mathclass Complex(object):def __init__(self, real, imaginary):self.n = complex(real, imaginary)self.real = realself.imaginary = imaginarydef __add__(self, no):res = self.n + no.nreturn Complex(res.real, res.imag)def __sub__(self, no):res = self.</description>
    </item>
    
    <item>
      <title>Hackerrank: Default Arguments</title>
      <link>https://dea.gl/posts/2020/09/hackerrank-default-arguments/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dea.gl/posts/2020/09/hackerrank-default-arguments/</guid>
      <description>Problem In this challenge, the task is to debug the existing code to successfully execute all provided test files.
Python supports a useful concept of default argument values. For each keyword argument of a function, we can assign a default value which is going to be used as the value of said argument if the function is called without it. For example, consider the following increment function:
def increment_by(n, increment=1):return n + incrementThe functions works like this:</description>
    </item>
    
    <item>
      <title>Hackerrank: Find Angle MBC</title>
      <link>https://dea.gl/posts/2020/09/hackerrank-find-angle-mbc/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dea.gl/posts/2020/09/hackerrank-find-angle-mbc/</guid>
      <description>Problem ABC is a right triangle, 90° at B. Therefore, ∠ABC = 90°.
Point M is the midpoint of hypotenuse AC.
You are given the lengths AB and BC.
Your task is to find ∠MBC (angle θ°, as shown in the figure) in degrees.
Solution import cmathimport mathi = int(input())r = int(input())a = complex(r, i)print(&#39;{:.0f}°&#39;.format(round(math.degrees(cmath.phase(a)),0)))</description>
    </item>
    
    <item>
      <title>Hackerrank: ginortS</title>
      <link>https://dea.gl/posts/2020/09/hackerrank-ginorts/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dea.gl/posts/2020/09/hackerrank-ginorts/</guid>
      <description>Problem You are given a string S. S contains alphanumeric characters only.
Your task is to sort the string in the following manner:
 All sorted lowercase letters are ahead of uppercase letters. All sorted uppercase letters are ahead of digits. All sorted odd digits are ahead of sorted even digits.  Solution print(&#39;&#39;.join(sorted(input(), key=lambda i:&#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1357902468&#39;.find(i))))</description>
    </item>
    
    <item>
      <title>Hackerrank: Iterables and Iterators</title>
      <link>https://dea.gl/posts/2020/09/hackerrank-iterables-and-iterators/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dea.gl/posts/2020/09/hackerrank-iterables-and-iterators/</guid>
      <description>Problem The itertools module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an iterator algebra making it possible to construct specialized tools succinctly and efficiently in pure Python.
To read more about the functions in this module, check out their documentation here.
You are given a list of N lowercase English letters. For a given integer K, you can select any K indices (assume 1-based indexing) with a uniform probability from the list.</description>
    </item>
    
    <item>
      <title>Hackerrank: Maximize It!</title>
      <link>https://dea.gl/posts/2020/09/hackerrank-maximize-it/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dea.gl/posts/2020/09/hackerrank-maximize-it/</guid>
      <description>Problem You are given a function f(X) = X^2. You are also given K lists. The ith list consists of N_i elements.
You have to pick one element from each list so that the value from the equation below is maximized:
S = (f(X_1) + f(X_2) + &amp;hellip; + f(X_k)) % M
X_i denotes the element picked from the ith list. Find the maximized value S_max obtained.
% denotes the modulo operator.</description>
    </item>
    
    <item>
      <title>Hackerrank: Merge the Tools!</title>
      <link>https://dea.gl/posts/2020/09/hackerrank-merge-the-tools/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dea.gl/posts/2020/09/hackerrank-merge-the-tools/</guid>
      <description>Problem Consider the following:
 A string, s, of length n where s=c0c1&amp;hellip;cn-1. An integer, k, where k is a factor of n.  We can split s into n/k subsegments where each subsegment, ti, consists of a contiguous block of k characters in s. Then, use each ti to create string ui such that:
 The characters in ui are a subsequence of the characters in ti. Any repeat occurrence of a character is removed from the string such that each character in ui occurs exactly once.</description>
    </item>
    
  </channel>
</rss>