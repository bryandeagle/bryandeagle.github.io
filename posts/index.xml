<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Bryan Deagle</title>
        <link>https://dea.gl/posts/</link>
        <description>Recent content in Posts on Bryan Deagle</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 31 Dec 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://dea.gl/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Learning About Man-in-the-Middle Attacks with a Raspberry Pi</title>
            <link>https://dea.gl/posts/learning-about-man-in-the-middle-attacks-with-a-raspberry-pi/</link>
            <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/learning-about-man-in-the-middle-attacks-with-a-raspberry-pi/</guid>
            <description>Setting up the Raspberry Pi I download the Raspberry Pi image from the official site
Securing the Raspberry Pi C
passwdI followed this article to add some reasonable security to the pi.
Since I&amp;rsquo;ve installed the firewall ufw, I&amp;rsquo;ll be allowing SSH, HTTP and HTTPS with the following commands
ufw allow SSHufw allow HTTPufw allow HTTPSConfiguring the Raspberry Pi as a Gateway Installing MITM Proxy apt update &amp;amp;&amp;amp; apt install mitmproxy</description>
            <content type="html"><![CDATA[<h2 id="setting-up-the-raspberry-pi">Setting up the Raspberry Pi</h2>
<p>I download the Raspberry Pi image from <a href="https://www.raspberrypi.org/downloads/">the official site</a></p>
<h2 id="securing-the-raspberry-pi">Securing the Raspberry Pi</h2>
<p>C</p>
<pre><code>passwd
</code></pre><p>I followed <a href="https://www.raspberrypi.org/documentation/configuration/security.md">this article</a> to add some reasonable security to the pi.</p>
<p>Since I&rsquo;ve installed the firewall ufw, I&rsquo;ll be allowing SSH, HTTP and HTTPS with the following commands</p>
<pre><code>ufw allow SSH
ufw allow HTTP
ufw allow HTTPS
</code></pre><h2 id="configuring-the-raspberry-pi-as-a-gateway">Configuring the Raspberry Pi as a Gateway</h2>
<h2 id="installing-mitm-proxy">Installing MITM Proxy</h2>
<pre><code>apt update &amp;&amp; apt install mitmproxy
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Virtual Private Networks</title>
            <link>https://dea.gl/posts/virtual-private-networks/</link>
            <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/virtual-private-networks/</guid>
            <description></description>
            <content type="html"><![CDATA[]]></content>
        </item>
        
        <item>
            <title>Hardening a Raspberry Pi</title>
            <link>https://dea.gl/posts/hardening-a-raspberry-pi/</link>
            <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hardening-a-raspberry-pi/</guid>
            <description>One of the most fun things to play around with today is a Raspberry Pi. I&amp;rsquo;m constantly re-imaging my Raspberry Pi ,a nd so this guide walks through steps to take each time to ensure your device is sufficiently secure.
The security of your Raspberry Pi is important. Gaps in security leave your Raspberry Pi open to hackers who can then use it without your permission.
What level of security you need depends on how you wish to use your Raspberry Pi.</description>
            <content type="html"><![CDATA[<p>One of the most fun things to play around with today is a <a href="https://www.raspberrypi.org/">Raspberry Pi</a>. I&rsquo;m constantly re-imaging my Raspberry Pi ,a nd so this guide walks through steps to take each time to ensure your device is sufficiently secure.</p>
<p>The security of your Raspberry Pi is important. Gaps in security leave your Raspberry Pi open to hackers who can then use it without your permission.</p>
<p>What level of security you need depends on how you wish to use your Raspberry Pi. For example, if you are simply using your Raspberry Pi on your home network, behind a router with a firewall, then it is already quite secure by default.</p>
<p>However, if you wish to expose your Raspberry Pi directly to the internet, either with a direct connection (unlikely) or by letting certain protocols through your router firewall (e.g. SSH), then you need to make some basic security changes.</p>
<p>Even if you are hidden behind a firewall, it is sensible to take security seriously. This documentation will describe some ways of improving the security of your Raspberry Pi. Please note, though, that it is not exhaustive.</p>
<h2 id="change-your-default-password">Change your default password</h2>
<p>The default username and password is used for every single Raspberry Pi running Raspberry Pi OS. So, if you can get access to a Raspberry Pi, and these settings have not been changed, you have <code>root</code> access to that Raspberry Pi.</p>
<p>So the first thing to do is change the password. This can be done via the raspi-config application, or from the command line.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo raspi-config
</code></pre></div><p>Select option 2, and follow the instructions to change the password.</p>
<p>In fact, all raspi-config does is start up the command line <code>passwd</code> application, which you can do from the command line. Simply type in your new password and confirm it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">passwd
</code></pre></div><h2 id="changing-your-username">Changing your username</h2>
<p>You can, of course, make your Raspberry Pi even more secure by also changing your username. All Raspberry Pis come with the default username <code>pi</code>, so changing this will immediately make your Raspberry Pi more secure.</p>
<p>To add a new user, enter:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo adduser alice
</code></pre></div><p>You will be prompted to create a password for the new user.</p>
<p>The new user will have a home directory at <code>/home/alice/</code>.</p>
<p>To add them to the <code>sudo</code> group to give them <code>sudo</code> permissions as well as all of the other necessary permissions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo usermod -a -G adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,gpio,i2c,spi alice
</code></pre></div><p>You can check your permissions are in place (i.e. you can use <code>sudo</code>) by trying the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo su - alice
</code></pre></div><p>If it runs successfully, then you can be sure that the new account is in the <code>sudo</code> group.</p>
<p>Once you have confirmed that the new account is working, you can delete the <code>pi</code> user. In order to do this, you&rsquo;ll need to first close its process with the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo pkill -u pi
</code></pre></div><p>Please note that with the current Raspberry Pi OS distribution, there are some aspects that require the <code>pi</code> user to be present. If you are unsure whether you will be affected by this, then leave the <code>pi</code> user in place. Work is being done to reduce the dependency on the <code>pi</code> user.</p>
<p>To delete the <code>pi</code> user, type the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo deluser pi
</code></pre></div><p>This command will delete the <code>pi</code> user but will leave the <code>/home/pi</code> folder. If necessary, you can use the command below to remove the home folder for the <code>pi</code> user at the same time. Note the data in this folder will be permanently deleted, so make sure any required data is stored elsewhere.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo deluser -remove-home pi
</code></pre></div><p>This command will result in a warning that the group <code>pi</code> has no more members. The <code>deluser</code> command removes both the <code>pi</code> user and the <code>pi</code> group though, so the warning can be safely ignored.</p>
<h2 id="make-sudo-require-a-password">Make <code>sudo</code> require a password</h2>
<p>Placing <code>sudo</code> in front of a command runs it as a superuser, and by default, that does not need a password. In general, this is not a problem. However, if your Pi is exposed to the internet and somehow becomes exploited (perhaps via a webpage exploit for example), the attacker will be able to change things that require superuser credentials, unless you have set <code>sudo</code> to require a password.</p>
<p>To force <code>sudo</code> to require a password, enter:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo visudo /etc/sudoers.d/010_pi-nopasswd
</code></pre></div><p>and change the <code>pi</code> entry (or whichever usernames have superuser rights) to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pi ALL<span style="color:#f92672">=(</span>ALL<span style="color:#f92672">)</span> PASSWD: ALL
</code></pre></div><p>Then save the file: it will be checked for any syntax errors. If no errors were detected, the file will be saved and you will be returned to the shell prompt. If errors were detected, you will be asked &lsquo;what now?&rsquo; Press the &lsquo;enter&rsquo; key on your keyboard: this will bring up a list of options. You will probably want to use &lsquo;e&rsquo; for &lsquo;(e)dit sudoers file again,&rsquo; so you can edit the file and fix the problem. <strong>Note that choosing option &lsquo;Q&rsquo; will save the file with any syntax errors still in place, which makes it impossible for <em>any</em> user to use the sudo command.</strong></p>
<h2 id="ensure-you-have-the-latest-security-fixes">Ensure you have the latest security fixes</h2>
<p>This can be as simple as ensuring your version of Raspberry Pi OS is up-to-date, as an up-to-date distribution contains all the latest security fixes. Full instructions can be found <a href="../raspbian/updating.md">here</a>.</p>
<p>If you are using SSH to connect to your Raspberry Pi, it can be worthwhile to add a cron job that specifically updates the ssh-server. The following command, perhaps as a daily cron job, will ensure you have the latest SSH security fixes promptly, independent of your normal update process. More information on setting up cron can be found <a href="../linux/usage/cron.md">here</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">apt install openssh-server
</code></pre></div><h2 id="improving-ssh-security">Improving SSH security</h2>
<p>SSH is a common way of accessing a Raspberry Pi remotely. By default, logging in with SSH requires a username/password pair, and there are ways to make this more secure. An even more secure method is to use key based authentication.</p>
<h3 id="improving-usernamepassword-security">Improving username/password security</h3>
<p>The most important thing to do is ensure you have a very robust password. If your Raspberry Pi is exposed to the internet, the password needs to be very secure. This will help to avoid dictionary attacks or the like.</p>
<p>You can also <strong>allow</strong> or <strong>deny</strong> specific users by altering the <code>sshd</code> configuration.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo nano /etc/ssh/sshd_config
</code></pre></div><p>Add, edit, or append to the end of the file the following line, which contains the usernames you wish to allow to log in:</p>
<pre><code>AllowUsers alice bob
</code></pre><p>You can also use <code>DenyUsers</code> to specifically stop some usernames from logging in:</p>
<pre><code>DenyUsers jane john
</code></pre><p>After the change you will need to restart the <code>sshd</code> service using <code>sudo systemctl restart ssh</code> or reboot so the changes take effect.</p>
<h3 id="using-key-based-authentication">Using key-based authentication.</h3>
<p>Key pairs are two cryptographically secure keys. One is private, and one is public. They can be used to authenticate a client to an SSH server (in this case the Raspberry Pi).</p>
<p>The client generates two keys, which are cryptographically linked to each other. The private key should never be released, but the public key can be freely shared. The SSH server takes a copy of the public key, and, when a link is requested, uses this key to send the client a challenge message, which the client will encrypt using the private key. If the server can use the public key to decrypt this message back to the original challenge message, then the identity of the client can be confirmed.</p>
<p>Generating a key pair in Linux is done using the <code>ssh-keygen</code> command on the <strong>client</strong>; the keys are stored by default in the <code>.ssh</code> folder in the user&rsquo;s home directory. The private key will be called <code>id_rsa</code> and the associated public key will be called <code>id_rsa.pub</code>. The key will be 2048 bits long: breaking the encryption on a key of that length would take an extremely long time, so it is very secure. You can make longer keys if the situation demands it. Note that you should only do the generation process once: if repeated, it will overwrite any previous generated keys. Anything relying on those old keys will need to be updated to the new keys.</p>
<p>You will be prompted for a passphrase during key generation: this is an extra level of security. For the moment, leave this blank.</p>
<p>The public key now needs to be moved on to the server: see <a href="../remote-access/ssh/passwordless.md#copy-your-public-key-to-your-raspberry-pi">Copy your public key to your Raspberry Pi</a>.</p>
<p>Finally, we need to disable password logins, so that all authentication is done by the key pairs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo nano /etc/ssh/sshd_config
</code></pre></div><p>There are three lines that need to be changed to <code>no</code>, if they are not set that way already:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no
</code></pre></div><p>Save the file and either restart the ssh system with <code>sudo service ssh reload</code> or reboot.</p>
<h2 id="install-a-firewall">Install a firewall</h2>
<p>There are many firewall solutions available for Linux. Most use the underlying <a href="http://www.netfilter.org/projects/iptables/index.html">iptables</a> project to provide packet filtering. This project sits over the Linux netfiltering system. <code>iptables</code> is installed by default on Raspberry Pi OS, but is not set up. Setting it up can be a complicated task, and one project that provides a simpler interface than <code>iptables</code> is <a href="https://www.linux.com/learn/introduction-uncomplicated-firewall-ufw">ufw</a>, which stands for &lsquo;Uncomplicated Fire Wall&rsquo;. This is the default firewall tool in Ubuntu, and can be easily installed on your Raspberry Pi:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt install ufw
</code></pre></div><p><code>ufw</code> is a fairly straightforward command line tool, although there are some GUIs available for it. This document will describe a few of the basic command line options. Note that <code>ufw</code> needs to be run with superuser privileges, so all commands are preceded with <code>sudo</code>. It is also possible to use the option <code>--dry-run</code> any <code>ufw</code> commands, which indicates the results of the command without actually making any changes.</p>
<p>To enable the firewall, which will also ensure it starts up on boot, use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ufw enable
</code></pre></div><p>To disable the firewall, and disable start up on boot, use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ufw disable
</code></pre></div><p>Allow a particular port to have access (we have used port 22 in our example):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ufw allow <span style="color:#ae81ff">22</span>
</code></pre></div><p>Denying access on a port is also very simple (again, we have used port 22 as an example):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ufw deny <span style="color:#ae81ff">22</span>
</code></pre></div><p>You can also specify which service you are allowing or denying on a port. In this example, we are denying tcp on port 22:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ufw deny 22/tcp
</code></pre></div><p>You can specify the service even if you do not know which port it uses. This example allows the ssh service access through the firewall:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ufw allow ssh
</code></pre></div><p>The status command lists all current settings for the firewall:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ufw status
</code></pre></div><p>The rules can be quite complicated, allowing specific IP addresses to be blocked, specifying in which direction traffic is allowed, or limiting the number of attempts to connect, for example to help defeat a Denial of Service (DoS) attack. You can also specify the device rules are to be applied to (e.g. eth0, wlan0). Please refer to the <code>ufw</code> man page (<code>man ufw</code>) for full details, but here are some examples of more sophisticated commands.</p>
<p>Limit login attempts on ssh port using tcp: this denies connection if an IP address has attempted to connect six or more times in the last 30 seconds:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ufw limit ssh/tcp
</code></pre></div><p>Deny access to port 30 from IP address 192.168.2.1</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo ufw deny from 192.168.2.1 port <span style="color:#ae81ff">30</span>
</code></pre></div><h2 id="installing-fail2ban">Installing fail2ban</h2>
<p>If you are using your Raspberry Pi as some sort of server, for example an <code>ssh</code> or a webserver, your firewall will have deliberate &lsquo;holes&rsquo; in it to let the server traffic through. In these cases, <a href="http://www.fail2ban.org">Fail2ban</a> can be useful. Fail2ban, written in Python, is a scanner that examines the log files produced by the Raspberry Pi, and checks them for suspicious activity. It catches things like multiple brute-force attempts to log in, and can inform any installed firewall to stop further login attempts from suspicious IP addresses. It saves you having to manually check log files for intrusion attempts and then update the firewall (via <code>iptables</code>) to prevent them.</p>
<p>Install fail2ban using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt install fail2ban
</code></pre></div><p>On installation, Fail2ban creates a folder <code>/etc/fail2ban</code> in which there is a configuration file called <code>jail.conf</code>. This needs to be copied to <code>jail.local</code> to enable it. Inside this configuration file are a set of default options, together with options for checking specific services for abnormalities. Do the following to examine/change the rules that are used for <code>ssh</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
sudo nano /etc/fail2ban/jail.local
</code></pre></div><p>Add the following section to the <code>jail.conf</code> file. On some versions of fail2ban this section may already exist, so update this pre-existing section it if it is there.</p>
<pre><code>[ssh]
enabled  = true
port     = ssh
filter   = sshd
logpath  = /var/log/auth.log
maxretry = 6
</code></pre><p>As you can see, this section is named ssh, is enabled, examines the ssh port, filters using the <code>sshd</code> parameters, parses the <code>/var/log/auth.log</code> for malicious activity, and allows six retries before the detection threshold is reached. Checking the default section, we can see that the default banning action is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Default banning action (e.g. iptables, iptables-new,</span>
<span style="color:#75715e"># iptables-multiport, shorewall, etc) It is used to define</span>
<span style="color:#75715e"># action_* variables. Can be overridden globally or per</span>
<span style="color:#75715e"># section within jail.local file</span>
banaction <span style="color:#f92672">=</span> iptables-multiport
</code></pre></div><p><code>iptables-multiport</code> means that the Fail2ban system will run the <code>/etc/fail2ban/action.d/iptables-multiport.conf</code> file when the detection threshold is reached. There are a number of different action configuration files that can be used. Multiport bans all access on all ports.</p>
<p>If you want to permanently ban an IP address after three failed attempts, you can change the maxretry value in the <code>[ssh]</code> section, and set the bantime to a negative number:</p>
<pre><code>[ssh]
enabled  = true
port     = ssh
filter   = sshd
logpath  = /var/log/auth.log
maxretry = 3
bantime = -1
</code></pre><p>There is a good tutorial on some of the internals of Fail2ban <a href="https://www.digitalocean.com/community/tutorials/how-fail2ban-works-to-protect-services-on-a-linux-server">here</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>What is Project Management</title>
            <link>https://dea.gl/posts/what-is-project-management/</link>
            <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/what-is-project-management/</guid>
            <description></description>
            <content type="html"><![CDATA[]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Write a Function</title>
            <link>https://dea.gl/posts/hackerrank-python-write-a-function/</link>
            <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-write-a-function/</guid>
            <description>Problem An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.
In the Gregorian calendar, three conditions are used to identify leap years:
 The year can be evenly divided by 4, is a leap year, unless:  The year can be evenly divided by 100, it is NOT a leap year, unless:  The year is also evenly divisible by 400.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.</p>
<p>In the Gregorian calendar, three conditions are used to identify leap years:</p>
<ul>
<li>The year can be evenly divided by 4, is a leap year, unless:
<ul>
<li>The year can be evenly divided by 100, it is NOT a leap year, unless:
<ul>
<li>The year is also evenly divisible by 400. Then it is a leap year.
This means that in the Gregorian calendar, the years 2000 and 2400 are leap years, while 1800, 1900, 2100, 2200, 2300 and 2500 are NOT leap years. Source</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="task">Task</h3>
<p>Given a year, determine whether it is a leap year. If it is a leap year, return the Boolean True, otherwise return False.</p>
<p>Note that the code stub provided reads from STDIN and passes arguments to the is_leap function. It is only necessary to complete the is_leap function.</p>
<h3 id="solution">Solution</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_leap</span>(year):
    <span style="color:#66d9ef">return</span> (year <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">and</span> ((year <span style="color:#f92672">%</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">or</span> (year <span style="color:#f92672">%</span> <span style="color:#ae81ff">400</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Words Score</title>
            <link>https://dea.gl/posts/hackerrank-python-words-score/</link>
            <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-words-score/</guid>
            <description>Problem In this challenge, the task is to debug the existing code to successfully execute all provided test files.
Consider that vowels in the alphabet are a, e, i, o, u and y.
Function score_words takes a list of lowercase words as an argument and returns a score as follows:
The score of a single word is 2 if the word contains an even number of vowels. Otherwise, the score of this word is 1.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>In this challenge, the task is to debug the existing code to successfully execute all provided test files.</p>
<p>Consider that vowels in the alphabet are a, e, i, o, u and y.</p>
<p>Function score_words takes a list of lowercase words as an argument and returns a score as follows:</p>
<p>The score of a single word is 2 if the word contains an even number of vowels. Otherwise, the score of this word is 1. The score for the whole list of words is the sum of scores of all words in the list.</p>
<p>Debug the given function score_words such that it returns a correct score.</p>
<p>Your function will be tested on several cases by the locked template code.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_vowel</span>(letter):
    <span style="color:#66d9ef">return</span> letter <span style="color:#f92672">in</span> [<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;i&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39;u&#39;</span>, <span style="color:#e6db74">&#39;y&#39;</span>]

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">score_words</span>(words):
    score <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> words:
        num_vowels <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
        <span style="color:#66d9ef">for</span> letter <span style="color:#f92672">in</span> word:
            <span style="color:#66d9ef">if</span> is_vowel(letter):
                num_vowels <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">if</span> num_vowels <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            score <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span>
        <span style="color:#66d9ef">else</span>:
            score <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">return</span> score
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Word Order</title>
            <link>https://dea.gl/posts/hackerrank-python-word-order/</link>
            <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-word-order/</guid>
            <description>Problem You are given n words. Some words may repeat. For each word, output its number of occurrences. The output order should correspond with the input order of appearance of the word. See the sample input/output for clarification.
Note: Each input line ends with a &amp;ldquo;\n&amp;rdquo; character.
Solution from collections import OrderedDict d = OrderedDict() for _ in range(int(input())): line = input() if line in d: d[line] += 1 else: d[line] = 1 print(len(d)) print(&amp;#39; &amp;#39;.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>You are given n words. Some words may repeat. For each word, output its number of occurrences. The output order should correspond with the input order of appearance of the word. See the sample input/output for clarification.</p>
<p>Note: Each input line ends with a &ldquo;\n&rdquo; character.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> OrderedDict
d <span style="color:#f92672">=</span> OrderedDict()
<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(int(input())):
    line <span style="color:#f92672">=</span> input()
    <span style="color:#66d9ef">if</span> line <span style="color:#f92672">in</span> d:
        d[line] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">else</span>:
        d[line] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
print(len(d))
print(<span style="color:#e6db74">&#39; &#39;</span><span style="color:#f92672">.</span>join([str(d[i]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> d<span style="color:#f92672">.</span>keys()]))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Validating Postal Codes</title>
            <link>https://dea.gl/posts/hackerrank-python-validating-postal-codes/</link>
            <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-validating-postal-codes/</guid>
            <description>Problem A valid postal code P have to fullfil both below requirements:
 P must be a number in the range from to inclusive. P must not contain more than one alternating repetitive digit pair.  Alternating repetitive digits are digits which repeat immediately after the next digit. In other words, an alternating repetitive digit pair is formed by two equal digits that have just a single digit between them.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>A valid postal code P have to fullfil both below requirements:</p>
<ol>
<li>P must be a number in the range from  to  inclusive.</li>
<li>P must not contain more than one alternating repetitive digit pair.</li>
</ol>
<p>Alternating repetitive digits are digits which repeat immediately after the next digit. In other words, an alternating repetitive digit pair is formed by two equal digits that have just a single digit between them.</p>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ae81ff">121426</span> <span style="color:#75715e"># Here, 1 is an alternating repetitive digit.</span>
<span style="color:#ae81ff">523563</span> <span style="color:#75715e"># Here, NO digit is an alternating repetitive digit.</span>
<span style="color:#ae81ff">552523</span> <span style="color:#75715e"># Here, both 2 and 5 are alternating repetitive digits.</span>
</code></pre></div><p>Your task is to provide two regular expressions regex_integer_in_range and regex_alternating_repetitive_digit_pair. Where:</p>
<p>regex_integer_in_range should match only integers range from 100000 to 999999 inclusive</p>
<p>regex_alternating_repetitive_digit_pair should find alternating repetitive digits pairs in a given string.</p>
<p>Both these regular expressions will be used by the provided code template to check if the input string P is a valid postal code using the following expression:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">(bool(re<span style="color:#f92672">.</span>match(regex_integer_in_range, P)) 
<span style="color:#f92672">and</span> len(re<span style="color:#f92672">.</span>findall(regex_alternating_repetitive_digit_pair, P)) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>)
</code></pre></div><h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">regex_integer_in_range <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;^[1-9][0-9]</span><span style="color:#e6db74">{5}</span><span style="color:#e6db74">$&#34;</span>
regex_alternating_repetitive_digit_pair <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;(\d)(?=\d\1)&#34;</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Validating Credit Card Numbers</title>
            <link>https://dea.gl/posts/hackerrank-python-validating-credit-card-numbers/</link>
            <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-validating-credit-card-numbers/</guid>
            <description>Problem You and Fredrick are good friends. Yesterday, Fredrick received credit cards from ABCD Bank. He wants to verify whether his credit card numbers are valid or not. You happen to be great at regex so he is asking for your help!
A valid credit card from ABCD Bank has the following characteristics:
► It must start with a 4, 5 or 6. ► It must contain exactly 16 digits. ► It must only consist of digits (0-9).</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>You and Fredrick are good friends. Yesterday, Fredrick received  credit cards from ABCD Bank. He wants to verify whether his credit card numbers are valid or not. You happen to be great at regex so he is asking for your help!</p>
<p>A valid credit card from ABCD Bank has the following characteristics:</p>
<p>► It must start with a 4, 5 or 6.
► It must contain exactly 16 digits.
► It must only consist of digits (0-9).
► It may have digits in groups of 4, separated by one hyphen &ldquo;-&rdquo;.
► It must NOT use any other separator like ' ' , &lsquo;_&rsquo;, etc.
► It must NOT have 4 or more consecutive repeated digits.</p>
<h3 id="examples">Examples:</h3>
<p>Valid Credit Card Numbers</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ae81ff">4253625879615786</span>
<span style="color:#ae81ff">4424424424442444</span>
<span style="color:#ae81ff">5122</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2368</span><span style="color:#f92672">-</span><span style="color:#ae81ff">7954</span><span style="color:#f92672">-</span><span style="color:#ae81ff">3214</span>
</code></pre></div><p>Invalid Credit Card Numbers</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ae81ff">42536258796157867</span>       <span style="color:#75715e">#17 digits in card number → Invalid </span>
<span style="color:#ae81ff">4424444424442444</span>        <span style="color:#75715e">#Consecutive digits are repeating 4 or more times → Invalid</span>
<span style="color:#ae81ff">5122</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2368</span><span style="color:#f92672">-</span><span style="color:#ae81ff">7954</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">3214</span>   <span style="color:#75715e">#Separators other than &#39;-&#39; are used → Invalid</span>
<span style="color:#ae81ff">44244</span>x4424442444        <span style="color:#75715e">#Contains non digit characters → Invalid</span>
<span style="color:#ae81ff">0525362587961578</span>        <span style="color:#75715e">#Doesn&#39;t start with 4, 5 or 6 → Invalid</span>
</code></pre></div><h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re

<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(int(input())):
    s <span style="color:#f92672">=</span> input()
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> re<span style="color:#f92672">.</span>match(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^[4-6]\d</span><span style="color:#e6db74">{3}</span><span style="color:#e6db74">-?\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">-?\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">-?\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">$&#39;</span>, s):
        print(<span style="color:#e6db74">&#39;Invalid&#39;</span>)
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">if</span> re<span style="color:#f92672">.</span>search(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(\d)\1\1\1&#39;</span>, re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;-&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, s)):
            print(<span style="color:#e6db74">&#39;Invalid&#39;</span>)
        <span style="color:#66d9ef">else</span>:
            print(<span style="color:#e6db74">&#39;Valid&#39;</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Validating Email Addresses with a Filter</title>
            <link>https://dea.gl/posts/hackerrank-python-validating-email-addresses-with-a-filter/</link>
            <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-validating-email-addresses-with-a-filter/</guid>
            <description>Problem You are given an integer N followed by N email addresses. Your task is to print a list containing only valid email addresses in lexicographical order.
Valid email addresses must follow these rules:
 It must have the username@websitename.extension format type. The username can only contain letters, digits, dashes and underscores. The website name can only have letters and digits. The maximum length of the extension is .  Concept A filter takes a function returning True or False and applies it to a sequence, returning a list of only those members of the sequence where the function returned True.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>You are given an integer N followed by N email addresses. Your task is to print a list containing only valid email addresses in lexicographical order.</p>
<p>Valid email addresses must follow these rules:</p>
<ul>
<li>It must have the <a href="mailto:username@websitename.extension">username@websitename.extension</a> format type.</li>
<li>The username can only contain letters, digits, dashes and underscores.</li>
<li>The website name can only have letters and digits.</li>
<li>The maximum length of the extension is .</li>
</ul>
<h3 id="concept">Concept</h3>
<p>A filter takes a function returning True or False and applies it to a sequence, returning a list of only those members of the sequence where the function returned True. A Lambda function can be used with filters.</p>
<p>Let&rsquo;s say you have to make a list of the squares of integers from 0 to 9 (both included).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;</span> l <span style="color:#f92672">=</span> list(range(<span style="color:#ae81ff">10</span>))
<span style="color:#f92672">&gt;&gt;</span> l <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x:x<span style="color:#f92672">*</span>x, l))
</code></pre></div><p>Now, you only require those elements that are greater than 10 but less than 80.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;</span> l <span style="color:#f92672">=</span> list(filter(<span style="color:#66d9ef">lambda</span> x: x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">and</span> x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">80</span>, l))
</code></pre></div><p>Easy, isn&rsquo;t it?</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fun</span>(s):
    <span style="color:#66d9ef">return</span> re<span style="color:#f92672">.</span>match(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^[A-Za-z0-9\-_]+@[A-Za-z0-9]+\.[A-Za-z]{1,3}$&#39;</span>, s)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Triangle Quest 2</title>
            <link>https://dea.gl/posts/hackerrank-python-triangle-quest-2/</link>
            <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-triangle-quest-2/</guid>
            <description>Problem You are given a positive integer N. Your task is to print a palindromic triangle of size N.
For example, a palindromic triangle of size 5 is:
1 121 12321 1234321 123454321 You can&amp;rsquo;t take more than two lines. The first line (a for-statement) is already written for you. You have to complete the code using exactly one print statement.
Note: Using anything related to strings will give a score of .</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>You are given a positive integer N.
Your task is to print a palindromic triangle of size N.</p>
<p>For example, a palindromic triangle of size 5 is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ae81ff">1</span>
<span style="color:#ae81ff">121</span>
<span style="color:#ae81ff">12321</span>
<span style="color:#ae81ff">1234321</span>
<span style="color:#ae81ff">123454321</span>
</code></pre></div><p>You can&rsquo;t take more than two lines. The first line (a for-statement) is already written for you.
You have to complete the code using exactly one print statement.</p>
<p><strong>Note:</strong>
Using anything related to strings will give a score of .
Using more than one for-statement will give a score of .</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>,int(input())<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
    print((<span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>i<span style="color:#f92672">//</span><span style="color:#ae81ff">9</span>)<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Triangle Quest</title>
            <link>https://dea.gl/posts/hackerrank-python-triangle-quest/</link>
            <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-triangle-quest/</guid>
            <description>Problem You are given a positive integer N. Print a numerical triangle of height N-1 like the one below:
1 22 333 4444 55555 ...... Can you do it using only arithmetic operations, a single for loop and print statement?
Use no more than two lines. The first line (the for statement) is already written for you. You have to complete the print statement.
Note: Using anything related to strings will give a score of 0.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>You are given a positive integer N. Print a numerical triangle of height N-1 like the one below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ae81ff">1</span>
<span style="color:#ae81ff">22</span>
<span style="color:#ae81ff">333</span>
<span style="color:#ae81ff">4444</span>
<span style="color:#ae81ff">55555</span>
<span style="color:#f92672">......</span>
</code></pre></div><p>Can you do it using only arithmetic operations, a single for loop and print statement?</p>
<p>Use no more than two lines. The first line (the for statement) is already written for you. You have to complete the print statement.</p>
<p>Note: Using anything related to strings will give a score of 0.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>,int(input())):
    print(<span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>i<span style="color:#f92672">//</span><span style="color:#ae81ff">9</span><span style="color:#f92672">*</span>i)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hands-On with TLS/SSL Certificates</title>
            <link>https://dea.gl/posts/hands-on-with-tls/ssl-certificates/</link>
            <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hands-on-with-tls/ssl-certificates/</guid>
            <description>Introduction In this post, I&amp;rsquo;ll discuss TLS/SSL certificates. To learn more than just the theory, I&amp;rsquo;ll be acting as my own Certificate Authority, which will allow me to generate all the required files for TLS/SSL communication.
What is SSL/TLS? SSL and TLS are both cryptographic protocols used to increase security by encrypting communication over computer networks. SSL stands for Secure Sockets Layer while TLS stands for Transport Layer Security. TLS is the successor of SSL 3.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In this post, I&rsquo;ll discuss TLS/SSL certificates. To learn more than just the theory, I&rsquo;ll be acting as my own Certificate Authority, which will allow me to generate all the required files for TLS/SSL communication.</p>
<h2 id="what-is-ssltls">What is SSL/TLS?</h2>
<p>SSL and TLS are both cryptographic protocols used to increase security by encrypting communication over computer networks. SSL stands for <strong>Secure Sockets Layer</strong> while TLS stands for <strong>Transport Layer Security</strong>. TLS is the successor of SSL 3.0 and is now the standard (although both methods are still commonly referred to as SSL).</p>
<h2 id="becoming-a-certificate-authority">Becoming a Certificate Authority</h2>
<h3 id="step-1-generate-a-key">Step 1. Generate a key</h3>
<pre><code>openssl genrsa -des3 -out ca.key 2048
</code></pre><p>In this command, we&rsquo;re using the <strong>openssl</strong> tool to generate an RSA key (<strong>genrsa</strong>). With the <strong>-des3</strong> option, we&rsquo;re using the <a href="https://en.wikipedia.org/wiki/Triple_DES">triple DES</a> engine to encrypt the key. This option requires us to use a password whenever we want to use this key, which adds an essential layer of security.</p>
<p>We&rsquo;re telling the openssl tool to generate a key <strong>2048</strong> bits long, and output to <strong>ca.key</strong>.</p>
<h3 id="step-2-generate-a-root-certificate">Step 2. Generate a Root Certificate</h3>
<pre><code>openssl req -new -x509 -key ca.key -sha256 -days 365000 -out ca.pem
</code></pre><p>The <strong>openssl req</strong> command creates and processes certificate requests. It can also create self-signed certificates, which is what we&rsquo;re using it for, by giving it the <strong>-new -x509</strong> options.</p>
<p>We&rsquo;re using the <strong>sha256</strong> digest to sign this certificate with our previously generated key, <strong>ca.key</strong>.</p>
<p>We&rsquo;re also making this certificate valid for 1,000 years (365000 days) because it&rsquo;s self-signed, so expiry isn&rsquo;t too important.</p>
<p>Congratulations! You are now officially a <strong>Certificate Authority</strong>.</p>
<h2 id="getting-people-to-trust-your-authority">Getting People to Trust Your Authority</h2>
<p>Being a Certificate Authority doesn&rsquo;t mean much if nobody respects your authority.</p>
<p>The real Certificate Authorities will join, for example, <a href="https://docs.microsoft.com/en-us/security/trusted-root/program-requirements">Microsoft&rsquo;s Trusted Root Program</a> and have their certificates automatically installed on all Windows distributions.</p>
<p>Because we&rsquo;re just generating these for personal use, we&rsquo;ll have to manually install them on every device we want to trust us.</p>
<h3 id="1-installation-on-windows">1. Installation on Windows</h3>
<ul>
<li>Double-click on the <strong>certificate.crt</strong> file</li>
<li>Click on <strong>Install Certificate…</strong> then <strong>Current User</strong></li>
<li>Select <strong>Place all certificates in the following store</strong></li>
<li>Browse to <strong>Trusted Root Certificate Authorities</strong></li>
<li>Click <strong>Next</strong> and then click <strong>Finish</strong></li>
</ul>
<h3 id="2-installation-on-android">2. Installation on Android</h3>
<ul>
<li>Go to <strong>Settings</strong> » <strong>Security</strong> » <strong>Encryption &amp; credentials</strong></li>
<li>Go to <strong>Install from storage</strong> and select your certificate</li>
<li>Give the certificate a memorable name and select <strong>Wi-Fi</strong></li>
</ul>
<h3 id="3-installation-on-macos">3. Installation on MacOS</h3>
<ul>
<li>Open the macOS Keychain app, and go to <strong>File &gt; Import Items…</strong></li>
<li>Select your private key file, then search for the Common Name name</li>
<li>Double click on your certificate and expand the Trust section</li>
<li>Change <strong>When using this certificate</strong> to <strong>Always Trust</strong></li>
</ul>
<pre><code>sudo security add-trusted-cert -d -r trustRoot -k &quot;/Library/Keychains/System.keychain&quot; certificate.crt
</code></pre><h3 id="4-installation-on-ios">4. Installation on iOS</h3>
<ul>
<li>Go to <strong>Settings</strong> » <strong>Profile Downloaded</strong> » <strong>Install</strong></li>
<li>Go to <strong>Settings</strong> » <strong>General</strong> » <strong>About</strong></li>
<li>Scroll to the bottom and select <strong>Certificate Trust Settings</strong></li>
<li>Select <strong>Enable Full Trust for Root Certificates</strong></li>
</ul>
<h2 id="signing-certificates-as-a-certificate-authority">Signing Certificates as a Certificate Authority</h2>
<p>For SSL/TLS, web servers need two things:</p>
<ol>
<li>A private key, to encrypt traffic</li>
<li>A certificate, which serves as a public key and proof the webserver in question owns the domain.</li>
</ol>
<h3 id="step-1-generate-a-private-key">Step 1. Generate a Private Key</h3>
<p>It&rsquo;s helpful (but not necessary) to name the key, and all files we generate, based on the webserver we&rsquo;re running. In our example, we&rsquo;ll use <em>example.com</em>.</p>
<pre><code>openssl genrsa -out example.com.key 2048
</code></pre><p>This time we won&rsquo;t be password-protecting this key with the <strong>-des3</strong> option, like we did with our Root CA key.</p>
<h3 id="step-2-generate-a-certificate-signing-request">Step 2. Generate a Certificate Signing Request</h3>
<p>Even though we&rsquo;re the ones signing our certificate, in most situations, a different entity will be signing our certificate, so the workflow is:</p>
<ol>
<li>Generate a certificate signing request</li>
<li>Fulfill the certificate signing request with our ca private key</li>
</ol>
<p>We generate the certificate signing request (CSR) with the following command:</p>
<pre><code>openssl req -new -key example.com.key -out example.com.csr
</code></pre><p>We&rsquo;ll also need to configure the proper extensions for the certificate to work with most protocols. For that we&rsquo;ll create an extension config file, named example.com.ext, with the following contents:</p>
<pre><code>authorityKeyIdentifier=keyid
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = example.com
</code></pre><h3 id="step-3-fulfill-the-certificate-signing-request">Step 3. Fulfill the Certificate Signing Request</h3>
<p>We fulfill our certificate signing process by generating our new certificate, signed with our Root Certificate Authority key.</p>
<pre><code>openssl x509 -req -in example.com.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out example.com.crt -days 825 -sha256 -extfile example.com.ext
</code></pre><p>We should now have <strong>example.com.crt</strong> to go along with our <strong>example.com.key</strong>, which is all we need to enable TLS/SSL on our website. Below is an example of an Apache configuration that utilizes our newly generated certificate and key.</p>
<pre><code>&lt;VirtualHost *:80&gt;
        ServerName example.com
        ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:443&gt;
        ServerName example.com
        ...
        SSLCertificateFile /opt/cert/example.com.crt
        SSLCertificateKeyFile /opt/cert/example.com.key
&lt;/VirtualHost&gt;
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Time Delta</title>
            <link>https://dea.gl/posts/hackerrank-python-time-delta/</link>
            <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-time-delta/</guid>
            <description>Problem When users post an update on social media,such as a URL, image, status update etc., other users in their network are able to view this new post on their news feed. Users can also see exactly when the post was published, i.e, how many hours, minutes or seconds ago.
Since sometimes posts are published and viewed in different time zones, this can be confusing. You are given two timestamps of one such post that a user can see on his newsfeed in the following format:</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>When users post an update on social media,such as a URL, image, status update etc., other users in their network are able to view this new post on their news feed. Users can also see exactly when the post was published, i.e, how many hours, minutes or seconds ago.</p>
<p>Since sometimes posts are published and viewed in different time zones, this can be confusing. You are given two timestamps of one such post that a user can see on his newsfeed in the following format:</p>
<p>Day dd Mon yyyy hh:mm:ss +xxxx</p>
<p>Here +xxxx represents the time zone. Your task is to print the absolute difference (in seconds) between them.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime <span style="color:#66d9ef">as</span> dt

fmt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%a</span><span style="color:#e6db74"> </span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> %b %Y %H:%M:%S %z&#39;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(int(input())):
    print(int(abs((dt<span style="color:#f92672">.</span>strptime(input(), fmt) <span style="color:#f92672">-</span> 
                   dt<span style="color:#f92672">.</span>strptime(input(), fmt))<span style="color:#f92672">.</span>total_seconds())))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: The Minion Game</title>
            <link>https://dea.gl/posts/hackerrank-python-the-minion-game/</link>
            <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-the-minion-game/</guid>
            <description>Problem Kevin and Stuart want to play the &amp;lsquo;The Minion Game&amp;rsquo;.
Game Rules Both players are given the same string, . Both players have to make substrings using the letters of the string . Stuart has to make words starting with consonants. Kevin has to make words starting with vowels. The game ends when both players have made all possible substrings.
Scoring A player gets +1 point for each occurrence of the substring in the string .</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>Kevin and Stuart want to play the &lsquo;The Minion Game&rsquo;.</p>
<h3 id="game-rules">Game Rules</h3>
<p>Both players are given the same string, .
Both players have to make substrings using the letters of the string .
Stuart has to make words starting with consonants.
Kevin has to make words starting with vowels.
The game ends when both players have made all possible substrings.</p>
<h3 id="scoring">Scoring</h3>
<p>A player gets +1 point for each occurrence of the substring in the string .</p>
<h3 id="for-example">For Example:</h3>
<p>String  = BANANA
Kevin&rsquo;s vowel beginning word = ANA
Here, ANA occurs twice in BANANA. Hence, Kevin will get 2 Points.</p>
<p>Your task is to determine the winner of the game and their score.</p>
<h3 id="solution">Solution</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">minion_game</span>(string):
    scores <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;Kevin&#39;</span>: <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#39;Stuart&#39;</span>: <span style="color:#ae81ff">0</span>}
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(string)):
        <span style="color:#66d9ef">if</span> string[i] <span style="color:#f92672">in</span> <span style="color:#e6db74">&#39;AEIOU&#39;</span>:
            scores[<span style="color:#e6db74">&#39;Kevin&#39;</span>] <span style="color:#f92672">+=</span> len(string) <span style="color:#f92672">-</span> i
        <span style="color:#66d9ef">else</span>:
            scores[<span style="color:#e6db74">&#39;Stuart&#39;</span>] <span style="color:#f92672">+=</span> len(string) <span style="color:#f92672">-</span> i
    
    <span style="color:#66d9ef">if</span> scores[<span style="color:#e6db74">&#39;Stuart&#39;</span>] <span style="color:#f92672">==</span> scores[<span style="color:#e6db74">&#39;Kevin&#39;</span>]:
        print(<span style="color:#e6db74">&#39;Draw&#39;</span>)
    <span style="color:#66d9ef">elif</span> scores[<span style="color:#e6db74">&#39;Stuart&#39;</span>] <span style="color:#f92672">&gt;</span> scores[<span style="color:#e6db74">&#39;Kevin&#39;</span>]:
        print(<span style="color:#e6db74">&#34;Stuart </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(scores[<span style="color:#e6db74">&#39;Stuart&#39;</span>]))
    <span style="color:#66d9ef">else</span>:
        print(<span style="color:#e6db74">&#39;Kevin </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(scores[<span style="color:#e6db74">&#39;Kevin&#39;</span>]))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Regex Substitution</title>
            <link>https://dea.gl/posts/hackerrank-python-regex-substitution/</link>
            <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-regex-substitution/</guid>
            <description>Problem The re.sub() tool (sub stands for substitution) evaluates a pattern and, for each valid match, it calls a method (or lambda). The method is called for all matches and can be used to modify strings in different ways. The re.sub() method returns the modified string as an output.
Learn more about re.sub().
Transformation of Strings Code
import re #Squaring numbers def square(match): number = int(match.group(0)) return str(number**2) print re.sub(r&amp;#34;\d+&amp;#34;, square, &amp;#34;1 2 3 4 5 6 7 8 9&amp;#34;) Output</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>The re.sub() tool (sub stands for substitution) evaluates a pattern and, for each valid match, it calls a method (or lambda).
The method is called for all matches and can be used to modify strings in different ways.
The re.sub() method returns the modified string as an output.</p>
<p>Learn more about re.sub().</p>
<h3 id="transformation-of-strings">Transformation of Strings</h3>
<p>Code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re

<span style="color:#75715e">#Squaring numbers</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">square</span>(match):
    number <span style="color:#f92672">=</span> int(match<span style="color:#f92672">.</span>group(<span style="color:#ae81ff">0</span>))
    <span style="color:#66d9ef">return</span> str(number<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>)

print re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\d+&#34;</span>, square, <span style="color:#e6db74">&#34;1 2 3 4 5 6 7 8 9&#34;</span>)
</code></pre></div><p>Output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#ae81ff">1</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">16</span> <span style="color:#ae81ff">25</span> <span style="color:#ae81ff">36</span> <span style="color:#ae81ff">49</span> <span style="color:#ae81ff">64</span> <span style="color:#ae81ff">81</span>
</code></pre></div><h3 id="replacements-in-strings">Replacements in Strings</h3>
<p>Code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re

html <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">&lt;head&gt;
</span><span style="color:#e6db74">&lt;title&gt;HTML&lt;/title&gt;
</span><span style="color:#e6db74">&lt;/head&gt;
</span><span style="color:#e6db74">&lt;object type=&#34;application/x-flash&#34; 
</span><span style="color:#e6db74">  data=&#34;your-file.swf&#34; 
</span><span style="color:#e6db74">  width=&#34;0&#34; height=&#34;0&#34;&gt;
</span><span style="color:#e6db74">  &lt;!-- &lt;param name=&#34;movie&#34;  value=&#34;your-file.swf&#34; /&gt; --&gt;
</span><span style="color:#e6db74">  &lt;param name=&#34;quality&#34; value=&#34;high&#34;/&gt;
</span><span style="color:#e6db74">&lt;/object&gt;
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>

print re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">&#34;(&lt;!--.*?--&gt;)&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, html) <span style="color:#75715e">#remove comment</span>
</code></pre></div><p>Output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&lt;</span>head<span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;</span>title<span style="color:#f92672">&gt;</span>HTML<span style="color:#f92672">&lt;/</span>title<span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;/</span>head<span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;</span>object type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;application/x-flash&#34;</span> 
  data<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your-file.swf&#34;</span> 
  width<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span> height<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span><span style="color:#f92672">&gt;</span>

  <span style="color:#f92672">&lt;</span>param name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;quality&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;high&#34;</span><span style="color:#f92672">/&gt;</span>
<span style="color:#f92672">&lt;/</span>object<span style="color:#f92672">&gt;</span>
</code></pre></div><h3 id="task">Task</h3>
<p>You are given a text of N lines. The text contains &amp;&amp; and || symbols.
Your task is to modify those symbols to the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&amp;&amp;</span> <span style="color:#960050;background-color:#1e0010">→</span> <span style="color:#f92672">and</span>
<span style="color:#f92672">||</span> <span style="color:#960050;background-color:#1e0010">→</span> <span style="color:#f92672">or</span>
</code></pre></div><p>Both &amp;&amp; and || should have a space &quot; &quot; on both sides.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re
<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(int(input())):
    s <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(?&lt;=\s)\&amp;\&amp;(?=\s)&#39;</span>, <span style="color:#e6db74">&#39;and&#39;</span>, input())
    s <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(?&lt;=\s)\|\|(?=\s)&#39;</span>, <span style="color:#e6db74">&#39;or&#39;</span>, s)
    print(s)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>An Overview of the HTTPS Protocol</title>
            <link>https://dea.gl/posts/an-overview-of-the-https-protocol/</link>
            <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/an-overview-of-the-https-protocol/</guid>
            <description>How HTTPS Works Type facebook.com into your web browser, and you&amp;rsquo;ll see a little lock appear to the left of the URL. That lock means you are using HTTPS and signifies that your connection to facebook.com is secure.
Using HTTPS over the older, not secure, HTTP has two benefits:
 The website your browser is talking to has proven itself to be facebook.com and is not just pretending to be. The communications your browser sends to the website are encrypted so that no-one except your browser and the website can read them.</description>
            <content type="html"><![CDATA[<h2 id="how-https-works">How HTTPS Works</h2>
<p>Type facebook.com into your web browser, and you&rsquo;ll see a little lock appear to the left of the URL. That lock means you are using <em>HTTPS</em> and signifies that your connection to facebook.com is secure.</p>
<p>Using HTTPS over the older, not secure, HTTP has two benefits:</p>
<ol>
<li>The website your browser is talking to has proven itself to be facebook.com and is not just pretending to be.</li>
<li>The communications your browser sends to the website are encrypted so that no-one except your browser and the website can read them.</li>
</ol>
<p>Those communications can include usernames, passwords, credit card numbers, and other critical information you wouldn&rsquo;t want in the hands of anyone but the real facebook.com.</p>
<h2 id="ensuring-identity">Ensuring Identity</h2>
<p>Your browser trusts that the website truly is facebook.com because it has presented us with a <em>certificate</em> stating it is facebook.com. If you click the lock on your browser, you can view it yourself.</p>
<p>&ldquo;But why should you trust that certificate, you ask?&rdquo; Great question. Because, like real-world certificates, someone you should trust has signed it.</p>
<p>Inspecting facebook.com&rsquo;s certificate shows that DigiCert signed it.</p>
<p>&ldquo;Hold on. Who is DigiCert, and why should I trust them?&rdquo; you ask. Another great question. I like where your head&rsquo;s at.</p>
<p>Digicert is a <em>Certificate Authority</em>. That means they are an organization able to sign certificates to prove that they are valid.</p>
<p>I trust DigiCert because Microsoft trusts them, and because I run Windows, I have no choice but to trust Microsoft. Because Microsoft trusts DigiCert as a Certificate Authority, Windows trusts certificates signed by DigiCert.</p>
<p>You can view this information by searching for <strong>Manage computer certificates</strong> in your start menu. From there, click on <strong>Trusted Root Certification Authorities »  Certificates</strong>, and in that long list, you should see DigiCert.</p>
<p>Microsoft also publishes the list of Certificate Authorities <a href="https://ccadb-public.secure.force.com/microsoft/IncludedCACertificateReportForMSFT">here</a>. On that page, you can find DigiCert as well.</p>
<p>And so that&rsquo;s the chain of trust. You trust Microsoft because you run their operating system. Microsoft has said you can trust what DigiCert says. And finally, DigiCert has said, you can trust the server you&rsquo;re talking to is facebook.com.</p>
<p>You can rest easy knowing you&rsquo;re not sending private information to somebody pretending to be facebook.com.</p>
<h2 id="ensuring-privacy">Ensuring Privacy</h2>
<p>Even though that&rsquo;s the real facebook.com, who might be able to intercept those communications and read your private data? That&rsquo;s an easy enough question to answer. On Windows, open up a command prompt and type:</p>
<pre><code>tracert facebook.com
</code></pre><p>On Linux or Mac OS, type:</p>
<pre><code>traceroute facebook.com
</code></pre><p>That command displays all the intermediate servers your communications go through before making it to facebook.com. Each line is a different server, and the first line is likely your router.</p>
<p>Each item between your router and facebook.com is another server capable of reading all the unencrypted information you send to facebook.com. That can sometimes be dozens of servers that are not you, or facebook.com, in a position to read all communications between you and facebook.com.</p>
<h2 id="upgrading-to-https">Upgrading to HTTPS</h2>
<p>I hope you understand the value that HTTPS provides and the meaning behind that little lock symbol. There&rsquo;s really no downside to using HTTPS, so you should try to use it everywhere it&rsquo;s available.</p>
<p>How did it know to use HTTPS and not the regular old, unsafe HTTP when I typed in facebook.com?</p>
<p>Not all websites support HTTPS. So, when you type in facebook.com, your browser requested the HTTP version of facebook.com (<a href="http://facebook.com">http://facebook.com</a>). Facebook&rsquo;s servers then responded by redirecting you to the HTTPS version of the site (<a href="https://facebook.com">https://facebook.com</a>).</p>
<p>If you care to inspect the network traffic, you can see something like what&rsquo;s shown below. That&rsquo;s facebook telling your browser, &ldquo;We support HTTPS, and you&rsquo;re going to want to use that instead of regular old HTTP.&rdquo;</p>
<pre><code>General
  Request URL: http://facebook.com/
  Request Method: GET
  Status Code: 307 Internal Redirect
  Referrer Policy: no-referrer-when-downgrade
Response Headers:
  Location: https://facebook.com/
  Non-Authoritative-Reason: HSTS
...
</code></pre><p>That&rsquo;s very nice of Facebook to be looking out for my privacy and security. But we should be taking this into our own hands, and not depending on websites to upgrade us to HTTPS, and encrypt our communications.</p>
<p>Enter HTTPS Everywhere.</p>
<h2 id="https-everywhere">HTTPS Everywhere</h2>
<p><a href="https://www.eff.org/https-everywhere">HTTPS Everywhere</a> is a Firefox, Chrome, and Opera extension that encrypts your communications with many major websites, which makes your browsing more secure.</p>
<p>By using HTTPS Everywhere, you can rest easy knowing that your browser is doing everything it can, upgrade communications to HTTPS wherever possible, and not depend on websites themselves to secure communications.</p>
]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Reduce Function</title>
            <link>https://dea.gl/posts/hackerrank-python-reduce-function/</link>
            <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-reduce-function/</guid>
            <description>Problem Given a list of rational numbers,find their product.
Concept The reduce() function applies a function of two arguments cumulatively on a list of objects in succession from left to right to reduce it to one value. Say you have a list, say [1,2,3] and you have to find its sum.
&amp;gt;&amp;gt;&amp;gt; reduce(lambda x, y : x + y,[1,2,3]) 6 You can also define an initial value. If it is specified, the function will assume initial value as the value given, and then reduce.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>Given a list of rational numbers,find their product.</p>
<h3 id="concept">Concept</h3>
<p>The reduce() function applies a function of two arguments cumulatively on a list of objects in succession from left to right to reduce it to one value. Say you have a list, say [1,2,3] and you have to find its sum.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> reduce(<span style="color:#66d9ef">lambda</span> x, y : x <span style="color:#f92672">+</span> y,[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>])
<span style="color:#ae81ff">6</span>
</code></pre></div><p>You can also define an initial value. If it is specified, the function will assume initial value as the value given, and then reduce. It is equivalent to adding the initial value at the beginning of the list. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> reduce(<span style="color:#66d9ef">lambda</span> x, y : x <span style="color:#f92672">+</span> y, [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>], <span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>)
<span style="color:#ae81ff">3</span>

<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> fractions <span style="color:#f92672">import</span> gcd
<span style="color:#f92672">&gt;&gt;&gt;</span> reduce(gcd, [<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">8</span>], <span style="color:#ae81ff">3</span>)
<span style="color:#ae81ff">1</span>
</code></pre></div><h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> fractions <span style="color:#f92672">import</span> Fraction
<span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> reduce

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">product</span>(fracs):
    t <span style="color:#f92672">=</span> reduce(<span style="color:#66d9ef">lambda</span> x,y: Fraction(x<span style="color:#f92672">.</span>numerator<span style="color:#f92672">*</span>y<span style="color:#f92672">.</span>numerator,x<span style="color:#f92672">.</span>denominator<span style="color:#f92672">*</span>y<span style="color:#f92672">.</span>denominator) , fracs)
    <span style="color:#66d9ef">return</span> t<span style="color:#f92672">.</span>numerator, t<span style="color:#f92672">.</span>denominator

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    fracs <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(int(input())):
        fracs<span style="color:#f92672">.</span>append(Fraction(<span style="color:#f92672">*</span>map(int, input()<span style="color:#f92672">.</span>split())))
    result <span style="color:#f92672">=</span> product(fracs)
    print(<span style="color:#f92672">*</span>result)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Piling Up!</title>
            <link>https://dea.gl/posts/hackerrank-python-piling-up/</link>
            <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-piling-up/</guid>
            <description>Problem There is a horizontal row of n cubes. The length of each cube is given. You need to create a new vertical pile of cubes. The new pile should follow these directions: if cubeiis on top of cubejthen sideLengthj≥ sideLengthi.
When stacking the cubes, you can only pick up either the leftmost or the rightmost cube each time. Print &amp;ldquo;Yes&amp;rdquo; if it is possible to stack the cubes. Otherwise, print &amp;ldquo;No&amp;rdquo;.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>There is a horizontal row of n cubes. The length of each cube is given. You need to create a new vertical pile of cubes. The new pile should follow these directions: if cube<!-- raw HTML omitted -->i<!-- raw HTML omitted --> is on top of cube<!-- raw HTML omitted -->j<!-- raw HTML omitted --> then sideLength<!-- raw HTML omitted -->j<!-- raw HTML omitted --> ≥ sideLength<!-- raw HTML omitted -->i<!-- raw HTML omitted -->.</p>
<p>When stacking the cubes, you can only pick up either the leftmost or the rightmost cube each time. Print &ldquo;Yes&rdquo; if it is possible to stack the cubes. Otherwise, print &ldquo;No&rdquo;. Do not print the quotation marks.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> deque

<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(int(input())):
    _ <span style="color:#f92672">=</span> input()
    h <span style="color:#f92672">=</span> deque(map(int, input()<span style="color:#f92672">.</span>split()))
    
    res, v <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">31</span>
    l, r <span style="color:#f92672">=</span> h<span style="color:#f92672">.</span>popleft(), h<span style="color:#f92672">.</span>pop()
    <span style="color:#66d9ef">while</span> res <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;&#39;</span>:
        <span style="color:#75715e"># print(&#39;v={},l={},r={},h={}&#39;.format(v,l,r,list(h)))</span>
        <span style="color:#66d9ef">if</span> l <span style="color:#f92672">&gt;=</span> r <span style="color:#f92672">and</span> l <span style="color:#f92672">&lt;=</span> v:
            v <span style="color:#f92672">=</span> l
            <span style="color:#66d9ef">if</span> len(h) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
                res <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Yes&#39;</span>
                <span style="color:#66d9ef">break</span>
            l <span style="color:#f92672">=</span> h<span style="color:#f92672">.</span>popleft()
        <span style="color:#66d9ef">elif</span> r <span style="color:#f92672">&gt;</span> l <span style="color:#f92672">and</span> r <span style="color:#f92672">&lt;=</span> v:
            v <span style="color:#f92672">=</span> r
            <span style="color:#66d9ef">if</span> len(h) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
                res <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Yes&#39;</span>
                <span style="color:#66d9ef">break</span>
            r <span style="color:#f92672">=</span> h<span style="color:#f92672">.</span>pop()
        <span style="color:#66d9ef">else</span>:
            res <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;No&#39;</span>
    print(res)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: No Idea!</title>
            <link>https://dea.gl/posts/hackerrank-python-no-idea/</link>
            <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-no-idea/</guid>
            <description>Problem There is an array of n integers. There are also 2 disjoint sets, A and B, each containing m integers. You like all the integers in set A and dislike all the integers in set B. Your initial happiness is 0. For each i integer in the array, if i∈A, you add 1 to your happiness. If i∈B, you add -1 to your happiness. Otherwise, your happiness does not change.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>There is an array of n integers. There are also 2 disjoint sets, A and B, each containing m integers. You like all the integers in set A and dislike all the integers in set B. Your initial happiness is 0. For each i integer in the array, if i∈A, you add 1 to your happiness. If i∈B, you add -1 to your happiness. Otherwise, your happiness does not change. Output your final happiness at the end.</p>
<p><strong>Note:</strong> Since A and B are sets, they have no repeated elements. However, the array might contain duplicate elements.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Get the input values</span>
_ <span style="color:#f92672">=</span> input()  <span style="color:#75715e"># Don&#39;t care about 1st line</span>
arr <span style="color:#f92672">=</span> list(map(int, input()<span style="color:#f92672">.</span>split()))
a <span style="color:#f92672">=</span> set(map(int, input()<span style="color:#f92672">.</span>split()))
b <span style="color:#f92672">=</span> set(map(int, input()<span style="color:#f92672">.</span>split()))

score <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> arr:
    <span style="color:#66d9ef">if</span> n <span style="color:#f92672">in</span> a:
        score <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">elif</span> n <span style="color:#f92672">in</span> b:
        score <span style="color:#f92672">-=</span><span style="color:#ae81ff">1</span>
print(score)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Merge the Tools!</title>
            <link>https://dea.gl/posts/hackerrank-python-merge-the-tools/</link>
            <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-merge-the-tools/</guid>
            <description>Problem Consider the following:
 A string, s, of length n where s=c0c1&amp;hellip;cn-1. An integer, k, where k is a factor of n.  We can split s into n/k subsegments where each subsegment, ti, consists of a contiguous block of k characters in s. Then, use each tito create string uisuch that:
 The characters in uiare a subsequence of the characters in ti. Any repeat occurrence of a character is removed from the string such that each character in uioccurs exactly once.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>Consider the following:</p>
<ul>
<li>A string, s, of length n where s=c<!-- raw HTML omitted -->0<!-- raw HTML omitted -->c<!-- raw HTML omitted -->1<!-- raw HTML omitted -->&hellip;c<!-- raw HTML omitted -->n-1<!-- raw HTML omitted -->.</li>
<li>An integer, k, where k is a factor of n.</li>
</ul>
<p>We can split s into n/k subsegments where each subsegment, t<!-- raw HTML omitted -->i<!-- raw HTML omitted -->, consists of a contiguous block of k characters in s. Then, use each t<!-- raw HTML omitted -->i<!-- raw HTML omitted --> to create string u<!-- raw HTML omitted -->i<!-- raw HTML omitted --> such that:</p>
<ul>
<li>The characters in u<!-- raw HTML omitted -->i<!-- raw HTML omitted --> are a subsequence of the characters in t<!-- raw HTML omitted -->i<!-- raw HTML omitted -->.</li>
<li>Any repeat occurrence of a character is removed from the string such that each character in u<!-- raw HTML omitted -->i<!-- raw HTML omitted --> occurs exactly once. In other words, if the character at some index j in t<!-- raw HTML omitted -->i<!-- raw HTML omitted --> occurs at a previous index &lt;j in t<!-- raw HTML omitted -->i<!-- raw HTML omitted -->, then do not include the character in string u<!-- raw HTML omitted -->i<!-- raw HTML omitted -->.</li>
</ul>
<p>Given s and k, print n/k lines where each line i denotes string u<!-- raw HTML omitted -->i<!-- raw HTML omitted -->.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">merge_the_tools</span>(string, k):
    u, i <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> string:
        <span style="color:#66d9ef">if</span> c <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> u:
            u <span style="color:#f92672">+=</span> c
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> k:
            i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
            print(u)
            u <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
        <span style="color:#66d9ef">else</span>:
            i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Maximize It!</title>
            <link>https://dea.gl/posts/hackerrank-python-maximize-it/</link>
            <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-maximize-it/</guid>
            <description>Problem You are given a function f(X) = X2. You are also given K lists. The ith list consists of Nielements.
You have to pick one element from each list so that the value from the equation below is maximized:
S = (f(X1) + f(X2) + &amp;hellip; + f(Xk)) % M
Xidenotes the element picked from the ith list. Find the maximized value Smaxobtained.
% denotes the modulo operator.
Note that you need to take exactly one element from each list, not necessarily the largest element.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>You are given a function f(X) = X<!-- raw HTML omitted -->2<!-- raw HTML omitted -->. You are also given K lists. The ith list consists of N<!-- raw HTML omitted -->i<!-- raw HTML omitted --> elements.</p>
<p>You have to pick one element from each list so that the value from the equation below is maximized:</p>
<p>S = (f(X<!-- raw HTML omitted -->1<!-- raw HTML omitted -->) + f(X<!-- raw HTML omitted -->2<!-- raw HTML omitted -->) + &hellip; + f(X<!-- raw HTML omitted -->k<!-- raw HTML omitted -->)) % M</p>
<p>X<!-- raw HTML omitted -->i<!-- raw HTML omitted --> denotes the element picked from the ith list. Find the maximized value S<!-- raw HTML omitted -->max<!-- raw HTML omitted --> obtained.</p>
<p>% denotes the modulo operator.</p>
<p>Note that you need to take exactly one element from each list, not necessarily the largest element. You add the squares of the chosen elements and perform the modulo operation. The maximum value that you can obtain, will be the answer to the problem.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> itertools

(K, N) <span style="color:#f92672">=</span> map(int, input()<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>split())

L <span style="color:#f92672">=</span> list()
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(K):
    L<span style="color:#f92672">.</span>append(list(map(int, input()<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39; &#39;</span>)))[<span style="color:#ae81ff">1</span>:])

S_max, L_max <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">None</span>
<span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>product(<span style="color:#f92672">*</span>L):
    s <span style="color:#f92672">=</span> sum([x<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> l]) <span style="color:#f92672">%</span> N

    <span style="color:#66d9ef">if</span> s <span style="color:#f92672">&gt;</span> S_max:
        S_max <span style="color:#f92672">=</span> s
        L_max <span style="color:#f92672">=</span> l

print(S_max)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Validating Matrix Script</title>
            <link>https://dea.gl/posts/hackerrank-python-validating-matrix-script/</link>
            <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-validating-matrix-script/</guid>
            <description>Problem Neo has a complex matrix script. The matrix script is a N X M grid of strings. It consists of alphanumeric characters, spaces and symbols (!,@,#,$,%,&amp;amp;).
To decode the script, Neo needs to read each column and select only the alphanumeric characters and connect them. Neo reads the column from top to bottom and starts reading from the leftmost column.
If there are symbols or spaces between two alphanumeric characters of the decoded script, then Neo replaces them with a single space &#39; &#39; for better readability.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>Neo has a complex matrix script. The matrix script is a N X M grid of strings. It consists of alphanumeric characters, spaces and symbols (!,@,#,$,%,&amp;).</p>
<p>To decode the script, Neo needs to read each column and select only the alphanumeric characters and connect them. Neo reads the column from top to bottom and starts reading from the leftmost column.</p>
<p>If there are symbols or spaces between two alphanumeric characters of the decoded script, then Neo replaces them with a single space ' ' for better readability.</p>
<p>Neo feels that there is no need to use &lsquo;if&rsquo; conditions for decoding.</p>
<p>Alphanumeric characters consist of: [A-Z, a-z, and 0-9].</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> math
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> random
<span style="color:#f92672">import</span> re
<span style="color:#f92672">import</span> sys

first_multiple_input <span style="color:#f92672">=</span> input()<span style="color:#f92672">.</span>rstrip()<span style="color:#f92672">.</span>split()
n <span style="color:#f92672">=</span> int(first_multiple_input[<span style="color:#ae81ff">0</span>])
m <span style="color:#f92672">=</span> int(first_multiple_input[<span style="color:#ae81ff">1</span>])
matrix <span style="color:#f92672">=</span> []

<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(n):
    matrix_item <span style="color:#f92672">=</span> input()
    matrix<span style="color:#f92672">.</span>append(matrix_item)

s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>  <span style="color:#75715e"># Create string</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(m):
    <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> matrix:
        s <span style="color:#f92672">+=</span> r[i]

s <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(?&lt;=[A-Za-z0-9])[!@#$%&amp; ]+(?=[A-Za-z0-9])&#39;</span>, <span style="color:#e6db74">&#39; &#39;</span>, s)

print(s)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Iterables and Iterators</title>
            <link>https://dea.gl/posts/hackerrank-python-iterables-and-iterators/</link>
            <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-iterables-and-iterators/</guid>
            <description>Problem The itertools module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an iterator algebra making it possible to construct specialized tools succinctly and efficiently in pure Python.
To read more about the functions in this module, check out their documentation here.
You are given a list of N lowercase English letters. For a given integer K, you can select any K indices (assume 1-based indexing) with a uniform probability from the list.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>The itertools module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an iterator algebra making it possible to construct specialized tools succinctly and efficiently in pure Python.</p>
<p>To read more about the functions in this module, check out their documentation here.</p>
<p>You are given a list of N lowercase English letters. For a given integer K, you can select any K indices (assume 1-based indexing) with a uniform probability from the list.</p>
<p>Find the probability that at least one of the K indices selected will contain the letter: &lsquo;a&rsquo;.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> itertools <span style="color:#f92672">import</span> permutations

n <span style="color:#f92672">=</span> int(input())
s <span style="color:#f92672">=</span> input()<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39; &#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
k <span style="color:#f92672">=</span> int(input())
p <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(x) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> permutations(s, k)]

num <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> p:
    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">in</span> x:
        num <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

print(num<span style="color:#f92672">/</span>len(p))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: ginortS</title>
            <link>https://dea.gl/posts/hackerrank-python-ginorts/</link>
            <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-ginorts/</guid>
            <description>Problem You are given a string S. S contains alphanumeric characters only.
Your task is to sort the string in the following manner:
 All sorted lowercase letters are ahead of uppercase letters. All sorted uppercase letters are ahead of digits. All sorted odd digits are ahead of sorted even digits.  Solution print(&amp;#39;&amp;#39;.join(sorted(input(), key=lambda i:&amp;#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1357902468&amp;#39;.find(i)))) </description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>You are given a string S.
S contains alphanumeric characters only.</p>
<p>Your task is to sort the string  in the following manner:</p>
<ul>
<li>All sorted lowercase letters are ahead of uppercase letters.</li>
<li>All sorted uppercase letters are ahead of digits.</li>
<li>All sorted odd digits are ahead of sorted even digits.</li>
</ul>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(sorted(input(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> i:<span style="color:#e6db74">&#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1357902468&#39;</span><span style="color:#f92672">.</span>find(i))))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Find Angle MBC</title>
            <link>https://dea.gl/posts/hackerrank-python-find-angle-mbc/</link>
            <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-find-angle-mbc/</guid>
            <description>Problem ABC is a right triangle, 90° at B. Therefore, ∠ABC = 90°.
Point M is the midpoint of hypotenuse AC.
You are given the lengths AB and BC.
Your task is to find ∠MBC (angle θ°, as shown in the figure) in degrees.
Solution import cmath import math i = int(input()) r = int(input()) a = complex(r, i) print(&amp;#39;{:.0f}°&amp;#39;.format(round(math.degrees(cmath.phase(a)),0))) </description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>ABC is a right triangle, 90° at B. Therefore, ∠ABC = 90°.</p>
<p>Point M is the midpoint of hypotenuse AC.</p>
<p>You are given the lengths AB and BC.</p>
<p>Your task is to find ∠MBC (angle θ°, as shown in the figure) in degrees.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> cmath
<span style="color:#f92672">import</span> math

i <span style="color:#f92672">=</span> int(input())
r <span style="color:#f92672">=</span> int(input())
a <span style="color:#f92672">=</span> complex(r, i)
print(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{:.0f}</span><span style="color:#e6db74">°&#39;</span><span style="color:#f92672">.</span>format(round(math<span style="color:#f92672">.</span>degrees(cmath<span style="color:#f92672">.</span>phase(a)),<span style="color:#ae81ff">0</span>)))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Default Arguments</title>
            <link>https://dea.gl/posts/hackerrank-python-default-arguments/</link>
            <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-default-arguments/</guid>
            <description>Problem In this challenge, the task is to debug the existing code to successfully execute all provided test files.
Python supports a useful concept of default argument values. For each keyword argument of a function, we can assign a default value which is going to be used as the value of said argument if the function is called without it. For example, consider the following increment function:
def increment_by(n, increment=1): return n + increment The functions works like this:</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>In this challenge, the task is to debug the existing code to successfully execute all provided test files.</p>
<p>Python supports a useful concept of default argument values. For each keyword argument of a function, we can assign a default value which is going to be used as the value of said argument if the function is called without it. For example, consider the following increment function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">increment_by</span>(n, increment<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
    <span style="color:#66d9ef">return</span> n <span style="color:#f92672">+</span> increment
</code></pre></div><p>The functions works like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> increment_by(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>)
<span style="color:#ae81ff">7</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> increment_by(<span style="color:#ae81ff">4</span>)
<span style="color:#ae81ff">5</span>
<span style="color:#f92672">&gt;&gt;&gt;</span>
</code></pre></div><p>Debug the given function print_from_stream using the default value of one of its arguments.</p>
<p>The function has the following signature:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_from_stream</span>(n, stream)
</code></pre></div><p>This function should print the first n values returned by get_next() method of stream object provided as an argument. Each of these values should be printed in a separate line.</p>
<p>Whenever the function is called without the stream argument, it should use an instance of EvenStream class defined in the code stubs below as the value of stream.</p>
<p>Your function will be tested on several cases by the locked template code.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_from_stream</span>(n, stream<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
    <span style="color:#66d9ef">if</span> stream <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
        stream <span style="color:#f92672">=</span> EvenStream()
    <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(n):
        print(stream<span style="color:#f92672">.</span>get_next())
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Dealing with Complex Numbers</title>
            <link>https://dea.gl/posts/hackerrank-python-dealing-with-complex-numbers/</link>
            <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-dealing-with-complex-numbers/</guid>
            <description>Problem For this challenge, you are given two complex numbers, and you have to print the result of their addition, subtraction, multiplication, division and modulus operations.
The real and imaginary precision part should be correct up to two decimal places.
Solution import math class Complex(object): def __init__(self, real, imaginary): self.n = complex(real, imaginary) self.real = real self.imaginary = imaginary def __add__(self, no): res = self.n + no.n return Complex(res.real, res.imag) def __sub__(self, no): res = self.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>For this challenge, you are given two complex numbers, and you have to print the result of their addition, subtraction, multiplication, division and modulus operations.</p>
<p>The real and imaginary precision part should be correct up to two decimal places.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> math

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Complex</span>(object):
    <span style="color:#66d9ef">def</span> __init__(self, real, imaginary):
        self<span style="color:#f92672">.</span>n <span style="color:#f92672">=</span> complex(real, imaginary)
        self<span style="color:#f92672">.</span>real <span style="color:#f92672">=</span> real
        self<span style="color:#f92672">.</span>imaginary <span style="color:#f92672">=</span> imaginary

    <span style="color:#66d9ef">def</span> __add__(self, no):
        res <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>n <span style="color:#f92672">+</span> no<span style="color:#f92672">.</span>n
        <span style="color:#66d9ef">return</span> Complex(res<span style="color:#f92672">.</span>real, res<span style="color:#f92672">.</span>imag)

    <span style="color:#66d9ef">def</span> __sub__(self, no):
        res <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>n <span style="color:#f92672">-</span> no<span style="color:#f92672">.</span>n
        <span style="color:#66d9ef">return</span> Complex(res<span style="color:#f92672">.</span>real, res<span style="color:#f92672">.</span>imag)

    <span style="color:#66d9ef">def</span> __mul__(self, no):
        res <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>n <span style="color:#f92672">*</span> no<span style="color:#f92672">.</span>n
        <span style="color:#66d9ef">return</span> Complex(res<span style="color:#f92672">.</span>real, res<span style="color:#f92672">.</span>imag)

    <span style="color:#66d9ef">def</span> __truediv__(self, no):
        res <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>n <span style="color:#f92672">/</span> no<span style="color:#f92672">.</span>n
        <span style="color:#66d9ef">return</span> Complex(res<span style="color:#f92672">.</span>real, res<span style="color:#f92672">.</span>imag)

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mod</span>(self):
        res <span style="color:#f92672">=</span> math<span style="color:#f92672">.</span>sqrt(self<span style="color:#f92672">.</span>n<span style="color:#f92672">.</span>real <span style="color:#f92672">**</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>n<span style="color:#f92672">.</span>imag <span style="color:#f92672">**</span> <span style="color:#ae81ff">2</span>)
        <span style="color:#66d9ef">return</span> Complex(res<span style="color:#f92672">.</span>real, res<span style="color:#f92672">.</span>imag)

    <span style="color:#66d9ef">def</span> __str__(self):
        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>imaginary <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            result <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%.2f</span><span style="color:#e6db74">+0.00i&#34;</span> <span style="color:#f92672">%</span> (self<span style="color:#f92672">.</span>real)
        <span style="color:#66d9ef">elif</span> self<span style="color:#f92672">.</span>real <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>imaginary <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>:
                result <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0.00+</span><span style="color:#e6db74">%.2f</span><span style="color:#e6db74">i&#34;</span> <span style="color:#f92672">%</span> (self<span style="color:#f92672">.</span>imaginary)
            <span style="color:#66d9ef">else</span>:
                result <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0.00-</span><span style="color:#e6db74">%.2f</span><span style="color:#e6db74">i&#34;</span> <span style="color:#f92672">%</span> (abs(self<span style="color:#f92672">.</span>imaginary))
        <span style="color:#66d9ef">elif</span> self<span style="color:#f92672">.</span>imaginary <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
            result <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%.2f</span><span style="color:#e6db74">+</span><span style="color:#e6db74">%.2f</span><span style="color:#e6db74">i&#34;</span> <span style="color:#f92672">%</span> (self<span style="color:#f92672">.</span>real, self<span style="color:#f92672">.</span>imaginary)
        <span style="color:#66d9ef">else</span>:
            result <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%.2f</span><span style="color:#e6db74">-</span><span style="color:#e6db74">%.2f</span><span style="color:#e6db74">i&#34;</span> <span style="color:#f92672">%</span> (self<span style="color:#f92672">.</span>real, abs(self<span style="color:#f92672">.</span>imaginary))
        <span style="color:#66d9ef">return</span> result

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    c <span style="color:#f92672">=</span> map(float, input()<span style="color:#f92672">.</span>split())
    d <span style="color:#f92672">=</span> map(float, input()<span style="color:#f92672">.</span>split())
    x <span style="color:#f92672">=</span> Complex(<span style="color:#f92672">*</span>c)
    y <span style="color:#f92672">=</span> Complex(<span style="color:#f92672">*</span>d)
    print(<span style="color:#f92672">*</span>map(str, [x<span style="color:#f92672">+</span>y, x<span style="color:#f92672">-</span>y, x<span style="color:#f92672">*</span>y, x<span style="color:#f92672">/</span>y, x<span style="color:#f92672">.</span>mod(), y<span style="color:#f92672">.</span>mod()]), sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Compress the String!</title>
            <link>https://dea.gl/posts/hackerrank-python-compress-the-string/</link>
            <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-compress-the-string/</guid>
            <description>Problem In this task, we would like for you to appreciate the usefulness of the groupby() function of itertools . To read more about this function, Check this out .
You are given a string S. Suppose a character &amp;lsquo;c&amp;rsquo; occurs consecutively X times in the string. Replace these consecutive occurrences of the character &amp;lsquo;c&amp;rsquo; with (X, c) in the string.
For a better understanding of the problem, check the explanation.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>In this task, we would like for you to appreciate the usefulness of the groupby() function of itertools . To read more about this function, Check this out .</p>
<p>You are given a string S. Suppose a character &lsquo;c&rsquo; occurs consecutively X times in the string. Replace these consecutive occurrences of the character &lsquo;c&rsquo; with (X, c) in the string.</p>
<p>For a better understanding of the problem, check the explanation.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> itertools <span style="color:#f92672">import</span> groupby

print(<span style="color:#e6db74">&#39; &#39;</span><span style="color:#f92672">.</span>join([<span style="color:#e6db74">&#39;(</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">, </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">)&#39;</span><span style="color:#f92672">.</span>format(len(list(g)), k) <span style="color:#66d9ef">for</span> k,g <span style="color:#f92672">in</span> groupby(input())]))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Company Logo</title>
            <link>https://dea.gl/posts/hackerrank-python-company-logo/</link>
            <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-company-logo/</guid>
            <description>Problem A newly opened multinational brand has decided to base their company logo on the three most common characters in the company name. They are now trying out various combinations of company names and logos based on this condition. Given a string , which is the company name in lowercase letters, your task is to find the top three most common characters in the string.
 Print the three most common characters along with their occurrence count.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>A newly opened multinational brand has decided to base their company logo on the three most common characters in the company name. They are now trying out various combinations of company names and logos based on this condition. Given a string , which is the company name in lowercase letters, your task is to find the top three most common characters in the string.</p>
<ul>
<li>Print the three most common characters along with their occurrence count.</li>
<li>Sort in descending order of occurrence count.</li>
<li>If the occurrence count is the same, sort the characters in alphabetical order.</li>
</ul>
<p>For example, according to the conditions described above,</p>
<p>GOOGLE would have it&rsquo;s logo with the letters G, O, E.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> Counter
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> Counter(sorted(input()))<span style="color:#f92672">.</span>most_common(<span style="color:#ae81ff">3</span>):
    print(<span style="color:#f92672">*</span>i)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hackerrank Python: Athlete Sort</title>
            <link>https://dea.gl/posts/hackerrank-python-athlete-sort/</link>
            <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://dea.gl/posts/hackerrank-python-athlete-sort/</guid>
            <description>Problem You are given a spreadsheet that contains a list of N athletes and their details (such as age, height, weight and so on). You are required to sort the data based on the Kth attribute and print the final resulting table. Follow the example given below for better understanding.
Note that K is indexed from 0 to M-1, where M is the number of attributes.
Note: If two attributes are the same for different rows, for example, if two atheletes are of the same age, print the row that appeared first in the input.</description>
            <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>You are given a spreadsheet that contains a list of N athletes and their details (such as age, height, weight and so on). You are required to sort the data based on the Kth attribute and print the final resulting table. Follow the example given below for better understanding.</p>
<p>Note that K is indexed from 0 to M-1, where M is the number of attributes.</p>
<p><strong>Note:</strong> If two attributes are the same for different rows, for example, if two atheletes are of the same age, print the row that appeared first in the input.</p>
<h2 id="solution">Solution</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">n,m <span style="color:#f92672">=</span> map(int, input()<span style="color:#f92672">.</span>split())
data <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(n):
    data<span style="color:#f92672">.</span>append(list(map(int, input()<span style="color:#f92672">.</span>split())))
k <span style="color:#f92672">=</span> int(input())

data<span style="color:#f92672">.</span>sort(key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x:x[k])

<span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> data:
    print(<span style="color:#e6db74">&#39; &#39;</span><span style="color:#f92672">.</span>join([str(i) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> l]))
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
